%pip install pyserial

import serial
import time

arduino = serial.Serial(port='COM3', baudrate=115200, timeout=1)
time.sleep(2) 

def send_command(command, steps=0, is_enable = "disable"):
    message = f"executebehavior {command} {steps} {is_enable}\n"
    arduino.write(message.encode())
    time.sleep(0.2)
    response = arduino.readline().decode().strip()
    if (response == "aa"):
        print(f"Arduino moved {arduino.readline().decode().strip()} Steps before stopping, Safety Switch is ON")
    elif (response == "ab"):
        print(f"Arduino moved {arduino.readline().decode().strip()} Steps")
    elif (response == "ac"):
        print(f"Arduino is in Idle State and waiting command")
    elif (response == "ad"):
        print(f"Arduino did not move, Safety Switch is ON")


def digital_read(pin=-1):
    message = f"digitalread {pin}\n"
    arduino.write(message.encode())
    time.sleep(0.2)
    response = arduino.readline().decode().strip()
    print(f"{response}")


def digital_write(pin=-1, state=" "):
    message = f"digitalwrite {pin} {state}\n"
    arduino.write(message.encode())
    time.sleep(0.2)
    response = arduino.readline().decode().strip()
    print(f"{response}")


def read_data():
    message = f"senddata\n"
    arduino.write(message.encode())
    time.sleep(0.2)
    print(f"State: {arduino.readline().decode().strip()}")
    print(f"Direction: {arduino.readline().decode().strip()}")
    print(f"Enabled: {arduino.readline().decode().strip()}")  
    print(f"Position: {arduino.readline().decode().strip()}")
    print(f"Time for Step: {arduino.readline().decode().strip()}")
    print(f"Safety Light: {arduino.readline().decode().strip()}")
    print(f"Idle Light: {arduino.readline().decode().strip()}")
    print(f"Move Light: {arduino.readline().decode().strip()}")
    print(f"Safety Switch: {arduino.readline().decode().strip()}")
    print(f"Direction Pin: {arduino.readline().decode().strip()}")
    print(f"Step Pin: {arduino.readline().decode().strip()}")
    print(f"Enabled Pin: {arduino.readline().decode().strip()}")
