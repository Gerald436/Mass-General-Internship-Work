int STATE;
bool DIRECTION;
int STEPS;
int TIME_FOR_STEP;

int SAFETY_LIGHT = 2;
int IDLE_LIGHT = 3;
int MOVE_LIGHT = 4;
int SAFETY_SWITCH =8;
int DIR_PIN = 12;
int STEP_PIN = 11;

int i = 0;

const int SAFETY_STATE = 2;
const int MOVE_STATE = 1;
const int IDLE_STATE = 0;

void executeLight(){
  if (STATE == MOVE_STATE){
      digitalWrite(SAFETY_LIGHT, LOW);
      digitalWrite(MOVE_LIGHT, HIGH);
      digitalWrite(IDLE_LIGHT, LOW);
    }
  if(STATE == IDLE_STATE){
      digitalWrite(SAFETY_LIGHT, LOW);
      digitalWrite(MOVE_LIGHT, LOW);
      digitalWrite(IDLE_LIGHT, HIGH);
  }
  if (STATE == SAFETY_STATE){
      digitalWrite(SAFETY_LIGHT, HIGH);
      digitalWrite(MOVE_LIGHT, LOW);
      digitalWrite(IDLE_LIGHT, LOW);
  }
}

void readData(){
  if (Serial.available() > 0){
    String msg = Serial.readString();
    int spaceIndex = msg.indexOf(' ');
    String stateMsg = msg.substring(0, spaceIndex);
    STEPS = msg.substring(spaceIndex + 1).toInt();

    if (stateMsg == "MOVE"){
      STATE = MOVE_STATE;
    }
    else{
      STATE = IDLE_STATE;
    }

    if (STEPS > 0){
      DIRECTION = true;
    }
    else{
      DIRECTION = false;
    }
  }
}

void executeStateBehavior(){
  if (i == abs(STEPS)){
    i=0;
    STATE = IDLE_STATE;
  }
  
  if (digitalRead(SAFETY_SWITCH) == HIGH){
    if (STATE == MOVE_STATE){
      digitalWrite(DIR_PIN, DIRECTION);
      for (; i < abs(STEPS); i++) {
        if (digitalRead(SAFETY_SWITCH) == LOW){
          STATE = SAFETY_STATE;
          break;
        }
        digitalWrite(STEP_PIN, HIGH);
        delayMicroseconds(337);
        digitalWrite(STEP_PIN, LOW);
        delayMicroseconds(337);
      }
    }
    if (STATE == IDLE_STATE){
      digitalWrite(STEP_PIN, LOW);
    }
  }
  else{
    digitalWrite(STEP_PIN, LOW);
    STATE = SAFETY_STATE;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(SAFETY_SWITCH, INPUT);
  pinMode(DIR_PIN, OUTPUT);
  pinMode(STEP_PIN, OUTPUT);

  STATE = IDLE_STATE;
  digitalWrite(IDLE_LIGHT, HIGH);
}

void loop() {
  readData();
  executeLight();
  executeStateBehavior();
}
